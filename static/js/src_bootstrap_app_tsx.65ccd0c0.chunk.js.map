{"version":3,"file":"static/js/src_bootstrap_app_tsx.65ccd0c0.chunk.js","mappings":"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","sources":["static.app.tsx","hooks/action/useDeposit.ts","hooks/action/useWithdrawNFT.ts","lib/constant.ts","target/types/le_flash.ts","lib/utils.ts","lib/core.ts","lib/merkleDistributor.ts","lib/utility.ts","configs/manifest.config.ts","configs/sol.config.ts","configs/api.config.ts","configs/index.ts","hooks/useUtility.ts","helper/index.ts","view/redeem.tsx","hooks/useGetMetadata.ts","view/index.tsx","hooks/useUploadFile.ts","model/devTools.ts","model/main.controller.tsx","model/index.ts","view/appLoader.tsx","bootstrap.app.tsx"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"logo\", {\n  enumerable: true,\n  get: function () {\n    return _logo.default;\n  }\n});\nexports.panels = void 0;\nObject.defineProperty(exports, \"readme\", {\n  enumerable: true,\n  get: function () {\n    return _README.default;\n  }\n});\nvar _panel = _interopRequireDefault(require(\"./static/images/panel.png\"));\nvar _logo = _interopRequireDefault(require(\"./static/images/logo.png\"));\nvar _README = _interopRequireDefault(require(\"./static/docs/README.md\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nconst panels = [_panel.default];\nexports.panels = panels;","import { useCallback, useState } from 'react'\nimport { web3 } from '@project-serum/anchor'\n\nimport { notifyError, notifySuccess } from '@sen-use/app'\n\nexport type Recipient = {\n  address?: string\n  mintNft: string\n}\n\nexport const useDeposit = () => {\n  const [loading, setLoading] = useState(false)\n\n  const onDeposit = useCallback(\n    async (recipients: Recipient[], poolAddress: string) => {\n      try {\n        setLoading(true)\n        let txs: {\n          tx: web3.Transaction\n          signers: web3.Keypair[]\n        }[] = []\n\n        for (const { address, mintNft } of recipients) {\n          const newChequeKeypair = web3.Keypair.generate()\n          const { tx, chequeAddress } = await window.leFlash.deposit({\n            recipient: address,\n            mintNFTAddress: mintNft,\n            sendAndConfirm: false,\n            poolAddress,\n            chequeKeypair: newChequeKeypair,\n          })\n          txs.push({ tx, signers: [newChequeKeypair] })\n          console.log('chequeAddress: ', chequeAddress)\n        }\n\n        await window.leFlash._provider.sendAll(\n          txs.map(({ tx, signers }) => ({ tx, signers })),\n        )\n        return notifySuccess('Deposited successfully!', 'txId')\n      } catch (error) {\n        notifyError(error)\n      } finally {\n        setLoading(false)\n      }\n    },\n    [],\n  )\n\n  return { onDeposit, loading }\n}\n","import { useCallback, useState } from 'react'\nimport { web3 } from '@project-serum/anchor'\n\nimport { notifyError, notifySuccess } from '@sen-use/app'\n\nconst useWithdrawNFT = () => {\n  const [loading, setLoading] = useState(false)\n  const onWithdraw = useCallback(async (chequeAddress: string) => {\n    try {\n      setLoading(true)\n      const tran: web3.Transaction[] = []\n      const { tx: txWithdraw } = await window.leFlash.withdrawNFT({\n        chequeAddress,\n        sendAndConfirm: false,\n      })\n      tran.push(txWithdraw)\n      const { tx: txClose } = await window.leFlash.closeCheque({\n        chequeAddress,\n        sendAndConfirm: false,\n      })\n      tran.push(txClose)\n\n      await window.leFlash._provider.sendAll(\n        tran.map((tx) => ({ tx, signers: [] })),\n      )\n      notifySuccess('Withdraw NFT successfully!', '')\n    } catch (error) {\n      notifyError(error)\n    } finally {\n      setLoading(false)\n    }\n  }, [])\n  return { loading, onWithdraw }\n}\n\nexport default useWithdrawNFT\n","import { IDL } from '../target/types/le_flash'\nimport { web3, BorshAccountsCoder, BN } from '@project-serum/anchor'\nimport { bs58 } from '@project-serum/anchor/dist/cjs/utils/bytes'\nimport { FeeOptions } from './types'\n\nexport const DEFAULT_RPC_ENDPOINT = 'https://api.devnet.solana.com'\nexport const DEFAULT_SEN_UTILITY_PROGRAM_ID =\n  '7oyG4wSf2kz2CxTqKTf1uhpPqrw9a8Av1w5t8Uj5PfXb'\nexport const DEFAULT_SEN_UTILITY_IDL = IDL\n\nexport const DISTRIBUTOR_DISCRIMINATOR = bs58.encode(\n  BorshAccountsCoder.accountDiscriminator('distributor'),\n)\nexport const RECEIPT_DISCRIMINATOR = bs58.encode(\n  BorshAccountsCoder.accountDiscriminator('receipt'),\n)\nexport const DEFAULT_LE_FLASH_IDL = IDL\n\nexport const FEE_OPTIONS = (\n  walletAddress: string = new web3.Keypair().publicKey.toBase58(),\n): FeeOptions => ({\n  fee: new BN(0),\n  feeCollectorAddress: walletAddress,\n})\n","export type LeFlash = {\n  version: '0.1.0'\n  name: 'le_flash'\n  instructions: [\n    {\n      name: 'initializePool'\n      accounts: [\n        {\n          name: 'authority'\n          isMut: true\n          isSigner: true\n        },\n        {\n          name: 'pool'\n          isMut: true\n          isSigner: true\n        },\n        {\n          name: 'treasurer'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'mintLpt'\n          isMut: true\n          isSigner: true\n        },\n        {\n          name: 'associatedTokenAccountLpt'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'systemProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'tokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'associatedTokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'rent'\n          isMut: false\n          isSigner: false\n        },\n      ]\n      args: [\n        {\n          name: 'mint'\n          type: 'publicKey'\n        },\n        {\n          name: 'treasury'\n          type: 'publicKey'\n        },\n      ]\n    },\n    {\n      name: 'deposit'\n      accounts: [\n        {\n          name: 'authority'\n          isMut: true\n          isSigner: true\n        },\n        {\n          name: 'pool'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'cheque'\n          isMut: true\n          isSigner: true\n        },\n        {\n          name: 'treasurer'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'mintLpt'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'associatedTokenAccountLpt'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'mint'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'metadata'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'treasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'srcAssociatedTokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'systemProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'tokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'associatedTokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'rent'\n          isMut: false\n          isSigner: false\n        },\n      ]\n      args: [\n        {\n          name: 'recipient'\n          type: 'publicKey'\n        },\n      ]\n    },\n    {\n      name: 'withdraw'\n      accounts: [\n        {\n          name: 'authority'\n          isMut: true\n          isSigner: true\n        },\n        {\n          name: 'pool'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'treasurer'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'mintLpt'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'associatedTokenAccountLpt'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'mint'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'metadata'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'treasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'dstAssociatedTokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'systemProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'tokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'associatedTokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'rent'\n          isMut: false\n          isSigner: false\n        },\n      ]\n      args: [\n        {\n          name: 'amountOut'\n          type: 'u64'\n        },\n      ]\n    },\n    {\n      name: 'withdrawNft'\n      accounts: [\n        {\n          name: 'authority'\n          isMut: true\n          isSigner: true\n        },\n        {\n          name: 'pool'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'cheque'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'treasurer'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'mintLpt'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'associatedTokenAccountLpt'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'mint'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'metadata'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'treasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'dstAssociatedTokenAccount'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'systemProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'tokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'associatedTokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'rent'\n          isMut: false\n          isSigner: false\n        },\n      ]\n      args: []\n    },\n    {\n      name: 'closeCheque'\n      accounts: [\n        {\n          name: 'authority'\n          isMut: true\n          isSigner: true\n        },\n        {\n          name: 'cheque'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'systemProgram'\n          isMut: false\n          isSigner: false\n        },\n      ]\n      args: []\n    },\n    {\n      name: 'initializeDistributor'\n      accounts: [\n        {\n          name: 'authority'\n          isMut: true\n          isSigner: true\n        },\n        {\n          name: 'distributor'\n          isMut: true\n          isSigner: true\n        },\n        {\n          name: 'src'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'treasurer'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'treasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'feeCollector'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'mint'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'tokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'associatedTokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'systemProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'rent'\n          isMut: false\n          isSigner: false\n        },\n      ]\n      args: [\n        {\n          name: 'merkleRoot'\n          type: {\n            array: ['u8', 32]\n          }\n        },\n        {\n          name: 'total'\n          type: 'u64'\n        },\n        {\n          name: 'endedAt'\n          type: 'i64'\n        },\n        {\n          name: 'startedAt'\n          type: 'i64'\n        },\n        {\n          name: 'metadata'\n          type: {\n            array: ['u8', 32]\n          }\n        },\n        {\n          name: 'fee'\n          type: 'u64'\n        },\n      ]\n    },\n    {\n      name: 'claim'\n      accounts: [\n        {\n          name: 'authority'\n          isMut: true\n          isSigner: true\n        },\n        {\n          name: 'distributor'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'receipt'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'dst'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'treasurer'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'treasury'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'feeCollector'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'mint'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'tokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'associatedTokenProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'systemProgram'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'rent'\n          isMut: false\n          isSigner: false\n        },\n      ]\n      args: [\n        {\n          name: 'proof'\n          type: {\n            vec: {\n              array: ['u8', 32]\n            }\n          }\n        },\n        {\n          name: 'amount'\n          type: 'u64'\n        },\n        {\n          name: 'startedAt'\n          type: 'i64'\n        },\n        {\n          name: 'salt'\n          type: {\n            array: ['u8', 32]\n          }\n        },\n        {\n          name: 'fee'\n          type: 'u64'\n        },\n        {\n          name: 'recipient'\n          type: 'publicKey'\n        },\n      ]\n    },\n  ]\n  accounts: [\n    {\n      name: 'cheque'\n      type: {\n        kind: 'struct'\n        fields: [\n          {\n            name: 'authority'\n            type: 'publicKey'\n          },\n          {\n            name: 'pool'\n            type: 'publicKey'\n          },\n          {\n            name: 'mint'\n            type: 'publicKey'\n          },\n          {\n            name: 'amount'\n            type: 'u64'\n          },\n        ]\n      }\n    },\n    {\n      name: 'distributor'\n      type: {\n        kind: 'struct'\n        fields: [\n          {\n            name: 'authority'\n            type: 'publicKey'\n          },\n          {\n            name: 'mint'\n            type: 'publicKey'\n          },\n          {\n            name: 'merkleRoot'\n            type: {\n              array: ['u8', 32]\n            }\n          },\n          {\n            name: 'total'\n            type: 'u64'\n          },\n          {\n            name: 'claimed'\n            type: 'u64'\n          },\n          {\n            name: 'endedAt'\n            type: 'i64'\n          },\n          {\n            name: 'startedAt'\n            type: 'i64'\n          },\n          {\n            name: 'metadata'\n            type: {\n              array: ['u8', 32]\n            }\n          },\n        ]\n      }\n    },\n    {\n      name: 'pool'\n      type: {\n        kind: 'struct'\n        fields: [\n          {\n            name: 'authority'\n            type: 'publicKey'\n          },\n          {\n            name: 'pool'\n            type: 'publicKey'\n          },\n          {\n            name: 'mint'\n            type: 'publicKey'\n          },\n          {\n            name: 'treasury'\n            type: 'publicKey'\n          },\n          {\n            name: 'mintLpt'\n            type: 'publicKey'\n          },\n        ]\n      }\n    },\n    {\n      name: 'receipt'\n      type: {\n        kind: 'struct'\n        fields: [\n          {\n            name: 'authority'\n            type: 'publicKey'\n          },\n          {\n            name: 'distributor'\n            type: 'publicKey'\n          },\n          {\n            name: 'recipient'\n            type: 'publicKey'\n          },\n          {\n            name: 'startedAt'\n            type: 'i64'\n          },\n          {\n            name: 'claimedAt'\n            type: 'i64'\n          },\n          {\n            name: 'salt'\n            type: {\n              array: ['u8', 32]\n            }\n          },\n        ]\n      }\n    },\n  ]\n  events: [\n    {\n      name: 'CloseChequeEvent'\n      fields: [\n        {\n          name: 'authority'\n          type: 'publicKey'\n          index: false\n        },\n        {\n          name: 'cheque'\n          type: 'publicKey'\n          index: false\n        },\n        {\n          name: 'mint'\n          type: 'publicKey'\n          index: false\n        },\n      ]\n    },\n    {\n      name: 'DepositEvent'\n      fields: [\n        {\n          name: 'authority'\n          type: 'publicKey'\n          index: false\n        },\n        {\n          name: 'pool'\n          type: 'publicKey'\n          index: false\n        },\n        {\n          name: 'mint'\n          type: 'publicKey'\n          index: false\n        },\n        {\n          name: 'cheque'\n          type: 'publicKey'\n          index: false\n        },\n        {\n          name: 'amountIn'\n          type: 'u64'\n          index: false\n        },\n        {\n          name: 'lptPrintAmount'\n          type: 'u64'\n          index: false\n        },\n      ]\n    },\n    {\n      name: 'InitializePoolEvent'\n      fields: [\n        {\n          name: 'authority'\n          type: 'publicKey'\n          index: false\n        },\n        {\n          name: 'pool'\n          type: 'publicKey'\n          index: false\n        },\n        {\n          name: 'mint'\n          type: 'publicKey'\n          index: false\n        },\n        {\n          name: 'treasury'\n          type: 'publicKey'\n          index: false\n        },\n      ]\n    },\n    {\n      name: 'ClaimEvent'\n      fields: [\n        {\n          name: 'destination'\n          type: 'publicKey'\n          index: false\n        },\n        {\n          name: 'recipient'\n          type: 'publicKey'\n          index: false\n        },\n        {\n          name: 'startedAt'\n          type: 'i64'\n          index: false\n        },\n        {\n          name: 'claimedAt'\n          type: 'i64'\n          index: false\n        },\n        {\n          name: 'claimed'\n          type: 'u64'\n          index: false\n        },\n      ]\n    },\n    {\n      name: 'InitializeDistributorEvent'\n      fields: [\n        {\n          name: 'authority'\n          type: 'publicKey'\n          index: false\n        },\n        {\n          name: 'distributor'\n          type: 'publicKey'\n          index: false\n        },\n        {\n          name: 'merkleRoot'\n          type: {\n            array: ['u8', 32]\n          }\n          index: false\n        },\n        {\n          name: 'total'\n          type: 'u64'\n          index: false\n        },\n        {\n          name: 'endedAt'\n          type: 'i64'\n          index: false\n        },\n        {\n          name: 'metadata'\n          type: {\n            array: ['u8', 32]\n          }\n          index: false\n        },\n      ]\n    },\n    {\n      name: 'RevokeEvent'\n      fields: [\n        {\n          name: 'authority'\n          type: 'publicKey'\n          index: false\n        },\n        {\n          name: 'distributor'\n          type: 'publicKey'\n          index: false\n        },\n        {\n          name: 'remaining'\n          type: 'u64'\n          index: false\n        },\n      ]\n    },\n    {\n      name: 'WithdrawNFTEvent'\n      fields: [\n        {\n          name: 'authority'\n          type: 'publicKey'\n          index: false\n        },\n        {\n          name: 'pool'\n          type: 'publicKey'\n          index: false\n        },\n        {\n          name: 'mint'\n          type: 'publicKey'\n          index: false\n        },\n        {\n          name: 'cheque'\n          type: 'publicKey'\n          index: false\n        },\n      ]\n    },\n    {\n      name: 'WithdrawEvent'\n      fields: [\n        {\n          name: 'authority'\n          type: 'publicKey'\n          index: false\n        },\n        {\n          name: 'pool'\n          type: 'publicKey'\n          index: false\n        },\n        {\n          name: 'mint'\n          type: 'publicKey'\n          index: false\n        },\n        {\n          name: 'amountOut'\n          type: 'u64'\n          index: false\n        },\n        {\n          name: 'amountLpt'\n          type: 'u64'\n          index: false\n        },\n      ]\n    },\n  ]\n  errors: [\n    {\n      code: 6000\n      name: 'InvalidNftCollection'\n      msg: 'Invalid NFT collection'\n    },\n    {\n      code: 6001\n      name: 'NotWithDraw'\n      msg: 'NFT has not been retrieved'\n    },\n    {\n      code: 6002\n      name: 'Overflow'\n      msg: 'Operation overflowed'\n    },\n    {\n      code: 6003\n      name: 'InvalidMerkleProof'\n      msg: 'Invalid merkle proof'\n    },\n    {\n      code: 6004\n      name: 'InvalidCurrentDate'\n      msg: 'Cannot get current date'\n    },\n    {\n      code: 6005\n      name: 'EndedCampaign'\n      msg: 'The campaign has been ended'\n    },\n    {\n      code: 6006\n      name: 'NotStartedCampaign'\n      msg: 'The campaign is not started yet'\n    },\n    {\n      code: 6007\n      name: 'NotEndedCampaign'\n      msg: 'The campaign is not ended yet'\n    },\n    {\n      code: 6008\n      name: 'NoBump'\n      msg: 'Cannot derive the program address'\n    },\n  ]\n}\n\nexport const IDL: LeFlash = {\n  version: '0.1.0',\n  name: 'le_flash',\n  instructions: [\n    {\n      name: 'initializePool',\n      accounts: [\n        {\n          name: 'authority',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'treasurer',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'mintLpt',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'associatedTokenAccountLpt',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'associatedTokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'mint',\n          type: 'publicKey',\n        },\n        {\n          name: 'treasury',\n          type: 'publicKey',\n        },\n      ],\n    },\n    {\n      name: 'deposit',\n      accounts: [\n        {\n          name: 'authority',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'cheque',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'treasurer',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'mintLpt',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'associatedTokenAccountLpt',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'mint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'metadata',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'treasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'srcAssociatedTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'associatedTokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'recipient',\n          type: 'publicKey',\n        },\n      ],\n    },\n    {\n      name: 'withdraw',\n      accounts: [\n        {\n          name: 'authority',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'treasurer',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'mintLpt',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'associatedTokenAccountLpt',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'mint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'metadata',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'treasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'dstAssociatedTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'associatedTokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'amountOut',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'withdrawNft',\n      accounts: [\n        {\n          name: 'authority',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'cheque',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'treasurer',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'mintLpt',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'associatedTokenAccountLpt',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'mint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'metadata',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'treasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'dstAssociatedTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'associatedTokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'closeCheque',\n      accounts: [\n        {\n          name: 'authority',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'cheque',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'initializeDistributor',\n      accounts: [\n        {\n          name: 'authority',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'distributor',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'src',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'treasurer',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'treasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feeCollector',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'mint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'associatedTokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'merkleRoot',\n          type: {\n            array: ['u8', 32],\n          },\n        },\n        {\n          name: 'total',\n          type: 'u64',\n        },\n        {\n          name: 'endedAt',\n          type: 'i64',\n        },\n        {\n          name: 'startedAt',\n          type: 'i64',\n        },\n        {\n          name: 'metadata',\n          type: {\n            array: ['u8', 32],\n          },\n        },\n        {\n          name: 'fee',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'claim',\n      accounts: [\n        {\n          name: 'authority',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'distributor',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'receipt',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'dst',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'treasurer',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'treasury',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feeCollector',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'mint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'associatedTokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'proof',\n          type: {\n            vec: {\n              array: ['u8', 32],\n            },\n          },\n        },\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n        {\n          name: 'startedAt',\n          type: 'i64',\n        },\n        {\n          name: 'salt',\n          type: {\n            array: ['u8', 32],\n          },\n        },\n        {\n          name: 'fee',\n          type: 'u64',\n        },\n        {\n          name: 'recipient',\n          type: 'publicKey',\n        },\n      ],\n    },\n  ],\n  accounts: [\n    {\n      name: 'cheque',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'authority',\n            type: 'publicKey',\n          },\n          {\n            name: 'pool',\n            type: 'publicKey',\n          },\n          {\n            name: 'mint',\n            type: 'publicKey',\n          },\n          {\n            name: 'amount',\n            type: 'u64',\n          },\n        ],\n      },\n    },\n    {\n      name: 'distributor',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'authority',\n            type: 'publicKey',\n          },\n          {\n            name: 'mint',\n            type: 'publicKey',\n          },\n          {\n            name: 'merkleRoot',\n            type: {\n              array: ['u8', 32],\n            },\n          },\n          {\n            name: 'total',\n            type: 'u64',\n          },\n          {\n            name: 'claimed',\n            type: 'u64',\n          },\n          {\n            name: 'endedAt',\n            type: 'i64',\n          },\n          {\n            name: 'startedAt',\n            type: 'i64',\n          },\n          {\n            name: 'metadata',\n            type: {\n              array: ['u8', 32],\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: 'pool',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'authority',\n            type: 'publicKey',\n          },\n          {\n            name: 'pool',\n            type: 'publicKey',\n          },\n          {\n            name: 'mint',\n            type: 'publicKey',\n          },\n          {\n            name: 'treasury',\n            type: 'publicKey',\n          },\n          {\n            name: 'mintLpt',\n            type: 'publicKey',\n          },\n        ],\n      },\n    },\n    {\n      name: 'receipt',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'authority',\n            type: 'publicKey',\n          },\n          {\n            name: 'distributor',\n            type: 'publicKey',\n          },\n          {\n            name: 'recipient',\n            type: 'publicKey',\n          },\n          {\n            name: 'startedAt',\n            type: 'i64',\n          },\n          {\n            name: 'claimedAt',\n            type: 'i64',\n          },\n          {\n            name: 'salt',\n            type: {\n              array: ['u8', 32],\n            },\n          },\n        ],\n      },\n    },\n  ],\n  events: [\n    {\n      name: 'CloseChequeEvent',\n      fields: [\n        {\n          name: 'authority',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'cheque',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'mint',\n          type: 'publicKey',\n          index: false,\n        },\n      ],\n    },\n    {\n      name: 'DepositEvent',\n      fields: [\n        {\n          name: 'authority',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'pool',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'mint',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'cheque',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'amountIn',\n          type: 'u64',\n          index: false,\n        },\n        {\n          name: 'lptPrintAmount',\n          type: 'u64',\n          index: false,\n        },\n      ],\n    },\n    {\n      name: 'InitializePoolEvent',\n      fields: [\n        {\n          name: 'authority',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'pool',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'mint',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'treasury',\n          type: 'publicKey',\n          index: false,\n        },\n      ],\n    },\n    {\n      name: 'ClaimEvent',\n      fields: [\n        {\n          name: 'destination',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'recipient',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'startedAt',\n          type: 'i64',\n          index: false,\n        },\n        {\n          name: 'claimedAt',\n          type: 'i64',\n          index: false,\n        },\n        {\n          name: 'claimed',\n          type: 'u64',\n          index: false,\n        },\n      ],\n    },\n    {\n      name: 'InitializeDistributorEvent',\n      fields: [\n        {\n          name: 'authority',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'distributor',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'merkleRoot',\n          type: {\n            array: ['u8', 32],\n          },\n          index: false,\n        },\n        {\n          name: 'total',\n          type: 'u64',\n          index: false,\n        },\n        {\n          name: 'endedAt',\n          type: 'i64',\n          index: false,\n        },\n        {\n          name: 'metadata',\n          type: {\n            array: ['u8', 32],\n          },\n          index: false,\n        },\n      ],\n    },\n    {\n      name: 'RevokeEvent',\n      fields: [\n        {\n          name: 'authority',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'distributor',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'remaining',\n          type: 'u64',\n          index: false,\n        },\n      ],\n    },\n    {\n      name: 'WithdrawNFTEvent',\n      fields: [\n        {\n          name: 'authority',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'pool',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'mint',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'cheque',\n          type: 'publicKey',\n          index: false,\n        },\n      ],\n    },\n    {\n      name: 'WithdrawEvent',\n      fields: [\n        {\n          name: 'authority',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'pool',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'mint',\n          type: 'publicKey',\n          index: false,\n        },\n        {\n          name: 'amountOut',\n          type: 'u64',\n          index: false,\n        },\n        {\n          name: 'amountLpt',\n          type: 'u64',\n          index: false,\n        },\n      ],\n    },\n  ],\n  errors: [\n    {\n      code: 6000,\n      name: 'InvalidNftCollection',\n      msg: 'Invalid NFT collection',\n    },\n    {\n      code: 6001,\n      name: 'NotWithDraw',\n      msg: 'NFT has not been retrieved',\n    },\n    {\n      code: 6002,\n      name: 'Overflow',\n      msg: 'Operation overflowed',\n    },\n    {\n      code: 6003,\n      name: 'InvalidMerkleProof',\n      msg: 'Invalid merkle proof',\n    },\n    {\n      code: 6004,\n      name: 'InvalidCurrentDate',\n      msg: 'Cannot get current date',\n    },\n    {\n      code: 6005,\n      name: 'EndedCampaign',\n      msg: 'The campaign has been ended',\n    },\n    {\n      code: 6006,\n      name: 'NotStartedCampaign',\n      msg: 'The campaign is not started yet',\n    },\n    {\n      code: 6007,\n      name: 'NotEndedCampaign',\n      msg: 'The campaign is not ended yet',\n    },\n    {\n      code: 6008,\n      name: 'NoBump',\n      msg: 'Cannot derive the program address',\n    },\n  ],\n}\n","import { Address, AnchorProvider, web3 } from '@project-serum/anchor'\nimport { Connection, PublicKey, Transaction } from '@solana/web3.js'\nimport { WalletInterface } from './rawWallet'\nimport { programs } from '@metaplex/js'\n\n/**\n * Validate an address\n * @param address Base58 string\n * @returns true/false\n */\nexport const isAddress = (address?: Address): address is Address => {\n  if (!address) return false\n  try {\n    const publicKey = new web3.PublicKey(address)\n    if (!publicKey) throw new Error('Invalid public key')\n    return true\n  } catch (er) {\n    return false\n  }\n}\n\nexport const getAnchorProvider = (\n  node: string,\n  walletAddress: string,\n  wallet: WalletInterface,\n): AnchorProvider => {\n  const connection = new Connection(node, 'confirmed')\n\n  const signAllTransactions = async (transactions: Transaction[]) => {\n    const signedTransactions = []\n    for (const transaction of transactions) {\n      const signedTransaction = await wallet.signTransaction(transaction)\n      signedTransactions.push(signedTransaction)\n    }\n    return signedTransactions\n  }\n\n  const publicKey = new PublicKey(walletAddress)\n  return new AnchorProvider(\n    connection,\n    {\n      publicKey: new PublicKey(publicKey),\n      signTransaction: wallet.signTransaction,\n      signAllTransactions,\n    },\n    {\n      commitment: 'confirmed',\n      skipPreflight: true,\n    },\n  )\n}\n\n/**\n * Find the NFT metadata address\n * @param nftAddress public key\n * @returns NFT metadata public key\n */\nexport const findNftMetadataAddress = async (nftAddress: web3.PublicKey) => {\n  const metadataPDA = await programs.metadata.Metadata.getPDA(\n    new web3.PublicKey(nftAddress),\n  )\n  return metadataPDA\n}\n\n/**\n * Validate an hash (must have length 32)\n * @param hash Hash buffer\n * @returns true/false\n */\nexport const isHash = (hash: Buffer | Uint8Array): boolean => {\n  if (!hash || hash.length !== 32) return false\n  return true\n}\n\n/**\n * Find the my receipt of an proposal based on canonical bump\n * @param index Receipt index\n * @param proposalPublicKey Proposal public key\n * @param authorityPublicKey Receipt authority public key\n * @param programId Sen Utility program public key\n * @returns Receipt public key\n */\nexport const findReceipt = async (\n  salt: Buffer,\n  distributorPublicKey: web3.PublicKey,\n  authorityPublicKey: web3.PublicKey,\n  programId: web3.PublicKey,\n) => {\n  const [receiptPublicKey] = await web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from('receipt'),\n      salt,\n      distributorPublicKey.toBuffer(),\n      authorityPublicKey.toBuffer(),\n    ],\n    programId,\n  )\n  return receiptPublicKey\n}\n","import {\n  web3,\n  Program,\n  utils,\n  Address,\n  AnchorProvider,\n  BN,\n} from '@project-serum/anchor'\nimport { ComputeBudgetProgram, Transaction } from '@solana/web3.js'\n\nimport { TOKEN_PROGRAM_ID } from '@project-serum/anchor/dist/cjs/utils/token'\nimport { LeFlash } from '../target/types/le_flash'\nimport { DEFAULT_LE_FLASH_IDL } from './constant'\nimport { findNftMetadataAddress, isAddress } from './utils'\nimport { ChequeData, PoolData } from './types'\n\nconst PROGRAMS = {\n  rent: web3.SYSVAR_RENT_PUBKEY,\n  systemProgram: web3.SystemProgram.programId,\n  associatedTokenProgram: utils.token.ASSOCIATED_PROGRAM_ID,\n  tokenProgram: TOKEN_PROGRAM_ID,\n}\n\nclass LeFlashProgram {\n  readonly _provider: AnchorProvider\n  readonly program: Program<LeFlash>\n  constructor(provider: AnchorProvider, programId: string) {\n    if (!isAddress(programId)) throw new Error('Invalid program id')\n    // Private\n    this._provider = provider\n    // Public\n    this.program = new Program<LeFlash>(\n      DEFAULT_LE_FLASH_IDL,\n      programId,\n      this._provider,\n    )\n  }\n  deriveTreasurerAddress = async (poolAddress: Address) => {\n    if (typeof poolAddress !== 'string') poolAddress = poolAddress.toBase58()\n    if (!isAddress(poolAddress)) throw new Error('Invalid pool address')\n    const poolPublicKey = new web3.PublicKey(poolAddress)\n    const [treasurerPublicKey] = await web3.PublicKey.findProgramAddress(\n      [Buffer.from('treasurer'), poolPublicKey.toBuffer()],\n      this.program.programId,\n    )\n    return treasurerPublicKey.toBase58()\n  }\n\n  /**\n   * Derive my cheque address by proposal address and receipt's index.\n   * @param proposalAddress Proposal address.\n   * @param strict (Optional) if true, a validation process will activate to make sure the cheque is safe.\n   * @returns cheque address.\n   */\n  deriveChequeAddress = async (\n    poolAddress: string,\n    strict: boolean = false,\n  ) => {\n    if (!isAddress(poolAddress)) throw new Error('Invalid proposal address')\n    const poolPublicKey = new web3.PublicKey(poolAddress)\n    const authorityPublicKey = this._provider.wallet.publicKey\n    const [chequePubkey] = await await web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('cheque'),\n        poolPublicKey.toBuffer(),\n        authorityPublicKey.toBuffer(),\n      ],\n      this.program.programId,\n    )\n    const chequeAddress = chequePubkey.toBase58()\n\n    if (strict) {\n      let onchainAuthorityAddress: string\n      let onchainPoolAddress: string\n      try {\n        const { authority, pool } = await this.getChequeData(chequeAddress)\n        onchainAuthorityAddress = authority.toBase58()\n        onchainPoolAddress = pool.toBase58()\n      } catch (er) {\n        throw new Error(`This cheque ${chequeAddress} is not initialized yet`)\n      }\n      if (\n        this._provider.wallet.publicKey.toBase58() !== onchainAuthorityAddress\n      )\n        throw new Error('Violated authority address')\n      if (poolAddress !== onchainPoolAddress)\n        throw new Error('Violated proposal address')\n    }\n\n    return chequeAddress\n  }\n\n  /**\n   * Get pool data.\n   * @param poolAddress Pool address.\n   * @returns Pool readable data.\n   */\n  getPoolData = async (poolAddress: Address): Promise<PoolData> => {\n    return this.program.account.pool.fetch(poolAddress) as any\n  }\n  /**\n   * Get pool data.\n   * @param chequeAddress Receipt address.\n   * @returns Pool readable data.\n   */\n  getChequeData = async (chequeAddress: Address): Promise<ChequeData> => {\n    return this.program.account.cheque.fetch(chequeAddress) as any\n  }\n\n  fetchCheques = async (): Promise<any> => {\n    return this.program.account.cheque.all() as any\n  }\n\n  requestUnits = (tx: web3.Transaction, addCompute: number): Transaction => {\n    return tx.add(\n      ComputeBudgetProgram.requestUnits({\n        units: addCompute,\n        additionalFee: 0,\n      }),\n    )\n  }\n\n  initializePool = async ({\n    pool = web3.Keypair.generate(),\n    mintLpt = web3.Keypair.generate(),\n    sendAndConfirm = true,\n    mint,\n  }: {\n    pool?: web3.Keypair\n    mintLpt?: web3.Keypair\n    sendAndConfirm?: boolean\n    mint: web3.PublicKey\n  }) => {\n    const newPool = pool\n    const poolAddress = newPool.publicKey.toBase58()\n    const treasurer = await this.deriveTreasurerAddress(poolAddress)\n\n    const tokenAccountLpt = await utils.token.associatedAddress({\n      mint: new web3.PublicKey(mintLpt.publicKey),\n      owner: new web3.PublicKey(this._provider.wallet.publicKey),\n    })\n\n    const treasury = await utils.token.associatedAddress({\n      mint: new web3.PublicKey(mint),\n      owner: new web3.PublicKey(treasurer),\n    })\n\n    const tx = await this.program.methods\n      .initializePool(mint, treasury)\n      .accounts({\n        associatedTokenAccountLpt: tokenAccountLpt,\n        authority: this._provider.wallet.publicKey,\n        mintLpt: mintLpt.publicKey,\n        pool: poolAddress,\n        treasurer,\n        ...PROGRAMS,\n      })\n      .transaction()\n\n    let txId = ''\n    if (sendAndConfirm) {\n      this._provider.opts.skipPreflight = true\n      txId = await this._provider.sendAndConfirm(tx, [newPool, mintLpt])\n    }\n\n    return { txId, poolAddress: newPool.publicKey.toBase58(), tx }\n  }\n\n  deposit = async ({\n    recipient = this._provider.wallet.publicKey.toBase58(),\n    poolAddress,\n    sendAndConfirm = true,\n    mintNFTAddress,\n    chequeKeypair = web3.Keypair.generate(),\n  }: {\n    recipient?: string\n    poolAddress: string\n    sendAndConfirm?: boolean\n    mintNFTAddress: string\n    chequeKeypair?: web3.Keypair\n  }) => {\n    const chequePubkey = new web3.PublicKey(recipient)\n    const { mintLpt } = await this.getPoolData(poolAddress)\n\n    const treasurer = await this.deriveTreasurerAddress(poolAddress)\n    const metadataAddress = await findNftMetadataAddress(\n      new web3.PublicKey(mintNFTAddress),\n    )\n    const metadataPublicKey = metadataAddress.toBase58()\n    const tokenAccountLpt = await utils.token.associatedAddress({\n      mint: mintLpt,\n      owner: new web3.PublicKey(this._provider.wallet.publicKey),\n    })\n\n    const srcAssociatedTokenAccount = await utils.token.associatedAddress({\n      mint: new web3.PublicKey(mintNFTAddress),\n      owner: new web3.PublicKey(this._provider.wallet.publicKey),\n    })\n    const treasury = await utils.token.associatedAddress({\n      mint: new web3.PublicKey(mintNFTAddress),\n      owner: new web3.PublicKey(treasurer),\n    })\n    const chequePublicKey = chequeKeypair.publicKey.toBase58()\n\n    let tx = await this.program.methods\n      .deposit(chequePubkey)\n      .accounts({\n        authority: this._provider.wallet.publicKey,\n        pool: poolAddress,\n        associatedTokenAccountLpt: tokenAccountLpt,\n        mint: mintNFTAddress,\n        mintLpt,\n        srcAssociatedTokenAccount,\n        treasurer,\n        treasury,\n        cheque: chequePublicKey,\n        metadata: metadataPublicKey,\n        ...PROGRAMS,\n      })\n      .transaction()\n\n    let txId = ''\n    if (sendAndConfirm) {\n      this._provider.opts.skipPreflight = true\n      txId = await this._provider.sendAndConfirm(tx, [chequeKeypair])\n    }\n    return { txId, tx, chequeAddress: chequeKeypair.publicKey.toBase58() }\n  }\n\n  withdraw = async ({\n    amount,\n    poolAddress,\n    sendAndConfirm = true,\n  }: {\n    amount: BN\n    poolAddress: Address\n    sendAndConfirm?: boolean\n  }) => {\n    const { mint, mintLpt } = await this.getPoolData(poolAddress)\n    const treasurer = await this.deriveTreasurerAddress(poolAddress)\n\n    const metadataAddress = await findNftMetadataAddress(\n      new web3.PublicKey(mint),\n    )\n    const metadataPublicKey = metadataAddress.toBase58()\n\n    const tokenAccountLpt = await utils.token.associatedAddress({\n      mint: mintLpt,\n      owner: new web3.PublicKey(this._provider.wallet.publicKey),\n    })\n\n    const dstAssociatedTokenAccount = await utils.token.associatedAddress({\n      mint,\n      owner: new web3.PublicKey(this._provider.wallet.publicKey),\n    })\n\n    const treasury = await utils.token.associatedAddress({\n      mint: new web3.PublicKey(mint),\n      owner: new web3.PublicKey(treasurer),\n    })\n\n    let tx = await this.program.methods\n      .withdraw(amount)\n      .accounts({\n        authority: this._provider.wallet.publicKey,\n        pool: poolAddress,\n        associatedTokenAccountLpt: tokenAccountLpt,\n        mint,\n        mintLpt,\n        dstAssociatedTokenAccount,\n        treasurer,\n        treasury,\n        metadata: metadataPublicKey,\n        ...PROGRAMS,\n      })\n      .transaction()\n\n    let txId = ''\n    if (sendAndConfirm) {\n      txId = await this._provider.sendAndConfirm(tx, [])\n    }\n    return { txId, tx }\n  }\n\n  withdrawNFT = async ({\n    chequeAddress,\n    sendAndConfirm = true,\n  }: {\n    chequeAddress: Address\n    sendAndConfirm?: boolean\n  }) => {\n    const { pool, mint: mintNFT } = await this.getChequeData(chequeAddress)\n    const { mintLpt } = await this.getPoolData(pool)\n    const treasurer = await this.deriveTreasurerAddress(pool)\n\n    const metadataAddress = await findNftMetadataAddress(\n      new web3.PublicKey(mintNFT),\n    )\n    const metadataPublicKey = metadataAddress.toBase58()\n\n    const tokenAccountLpt = await utils.token.associatedAddress({\n      mint: mintLpt,\n      owner: new web3.PublicKey(this._provider.wallet.publicKey),\n    })\n\n    const dstAssociatedTokenAccount = await utils.token.associatedAddress({\n      mint: mintNFT,\n      owner: new web3.PublicKey(this._provider.wallet.publicKey),\n    })\n\n    const treasury = await utils.token.associatedAddress({\n      mint: new web3.PublicKey(mintNFT),\n      owner: new web3.PublicKey(treasurer),\n    })\n\n    let tx = await this.program.methods\n      .withdrawNft()\n      .accounts({\n        authority: this._provider.wallet.publicKey,\n        pool,\n        associatedTokenAccountLpt: tokenAccountLpt,\n        mint: mintNFT,\n        mintLpt,\n        dstAssociatedTokenAccount,\n        treasurer,\n        treasury,\n        metadata: metadataPublicKey,\n        cheque: chequeAddress,\n        ...PROGRAMS,\n      })\n      .transaction()\n\n    let txId = ''\n    if (sendAndConfirm) {\n      txId = await this._provider.sendAndConfirm(tx, [])\n    }\n    return { txId, tx }\n  }\n\n  closeCheque = async ({\n    chequeAddress,\n    sendAndConfirm = true,\n  }: {\n    chequeAddress: string\n    sendAndConfirm?: boolean\n  }) => {\n    const chequePubkey = new web3.PublicKey(chequeAddress)\n    const tx = await this.program.methods\n      .closeCheque()\n      .accounts({\n        authority: this._provider.wallet.publicKey,\n        cheque: chequePubkey,\n        ...PROGRAMS,\n      })\n      .transaction()\n    let txId = ''\n    console.log(tx, 'tx')\n    if (sendAndConfirm) {\n      txId = await this._provider.sendAndConfirm(tx, [])\n    }\n    return { txId, tx }\n  }\n}\n\nexport default LeFlashProgram\n","import { web3, BN } from '@project-serum/anchor'\nimport { keccak_256 as hash } from 'js-sha3'\n\nexport type Leaf = {\n  authority: web3.PublicKey\n  chequeAddress: web3.PublicKey\n  startedAt: BN\n  salt: Buffer // 32 bytes\n}\n\nexport const LEAF_LEN = 104\n\nexport class MerkleDistributor {\n  public receipients: Leaf[]\n  public leafs: Buffer[]\n\n  constructor(receipients: Leaf[] = []) {\n    this.receipients = receipients\n    this.leafs = MerkleDistributor.sort(\n      ...this.receipients.map((receipient) => this.getLeaf(receipient)),\n    )\n  }\n\n  static sort = (...args: Buffer[]): Buffer[] => {\n    return [...args].sort((a, b) => {\n      const i = Buffer.compare(a, b)\n      if (i === 0) throw new Error('The receipients has a duplication')\n      return i\n    })\n  }\n\n  static serialize = ({\n    authority,\n    chequeAddress,\n    startedAt,\n    salt,\n  }: Leaf): Buffer => {\n    return Buffer.concat([\n      authority.toBuffer(),\n      chequeAddress.toBuffer(),\n      startedAt.toArrayLike(Buffer, 'le', 8),\n      salt,\n    ])\n  }\n\n  static deserialize = (buf: Buffer): Leaf => {\n    if (buf.length !== LEAF_LEN) throw new Error('Invalid buffer')\n    return {\n      authority: new web3.PublicKey(buf.subarray(0, 32)),\n      chequeAddress: new web3.PublicKey(buf.subarray(32, 64)),\n      startedAt: new BN(buf.subarray(64, 72), 'le'),\n      salt: Buffer.from(buf.subarray(72, 104)),\n    }\n  }\n\n  /**\n   * Get total distributed tokens\n   * @returns Total\n   */\n  getTotal = (): BN => {\n    let total: BN = new BN(this.receipients.length)\n    return total\n  }\n\n  static salt = (defaultSeed?: string): Buffer => {\n    let _seed = ''\n    while (_seed.length < 128)\n      _seed = _seed + Math.round(Math.random() * 10).toString()\n    const seed = defaultSeed || _seed\n    return Buffer.from(hash.digest(seed))\n  }\n\n  /**\n   * Convert current merkle tree to buffer.\n   * @returns Buffer.\n   */\n  toBuffer = () => {\n    return Buffer.concat(this.receipients.map(MerkleDistributor.serialize))\n  }\n\n  /**\n   * Build a merkle distributor instance from merkle tree data buffer.\n   * @param buf Merkle tree data buffer.\n   * @returns Merkle distributor instance.\n   */\n  static fromBuffer = (buf: Buffer): MerkleDistributor => {\n    if (buf.length % LEAF_LEN !== 0) throw new Error('Invalid buffer')\n    let re: Leaf[] = []\n    for (let i = 0; i < buf.length; i = i + LEAF_LEN)\n      re.push(MerkleDistributor.deserialize(buf.subarray(i, i + LEAF_LEN)))\n    return new MerkleDistributor(re)\n  }\n\n  private getLeaf = (data: Leaf): Buffer => {\n    const seed = MerkleDistributor.serialize(data)\n    return Buffer.from(hash.digest(seed))\n  }\n\n  private getParent = (a: Buffer, b: Buffer): Buffer => {\n    if (!a || !b) throw new Error('Invalid child')\n    const seed = Buffer.concat(MerkleDistributor.sort(a, b))\n    return Buffer.from(hash.digest(seed))\n  }\n\n  private getSibling = (a: Buffer, layer: Buffer[]): Buffer | undefined => {\n    const index = layer.findIndex((leaf) => leaf.compare(a) === 0)\n    if (index === -1) throw new Error('Invalid child')\n    return index % 2 === 1 ? layer[index - 1] : layer[index + 1]\n  }\n\n  private nextLayer = (bufs: Buffer[]) => {\n    const _bufs = [...bufs]\n    if (_bufs.length === 0) throw new Error('Invalid tree')\n    if (_bufs.length === 1) return _bufs\n    const carry = _bufs.length % 2 === 1 ? _bufs.pop() : undefined\n    const re = []\n    for (let i = 0; i < _bufs.length; i = i + 2)\n      re.push(this.getParent(_bufs[i], _bufs[i + 1]))\n    return carry ? [...re, carry] : re\n  }\n\n  /**\n   * Get the merkle root.\n   * @returns Merkle root.\n   */\n  deriveMerkleRoot = (): Buffer => {\n    let layer = this.leafs\n    while (layer.length > 1) layer = this.nextLayer(layer)\n    return layer[0]\n  }\n\n  /**\n   * Get merkle proof.\n   * @param data Receiptent data.\n   * @returns Merkle proof.\n   */\n  deriveProof = (data: Leaf): Buffer[] => {\n    let child = this.getLeaf(data)\n    const proof = []\n    let layer = this.leafs\n    while (layer.length > 1) {\n      const sibling = this.getSibling(child, layer)\n      if (sibling) {\n        child = this.getParent(child, sibling)\n        proof.push(sibling)\n      }\n      layer = this.nextLayer(layer)\n    }\n    return proof\n  }\n\n  /**\n   * Verify a merkle proof.\n   * @param proof Merkle proof.\n   * @param data Receiptent data.\n   * @returns Valid.\n   */\n  verifyProof = (proof: Buffer[], data: Leaf): boolean => {\n    let child = this.getLeaf(data)\n    for (const sibling of proof) {\n      child = this.getParent(child, sibling)\n    }\n    return this.deriveMerkleRoot().compare(child) === 0\n  }\n}\n","import { web3, Program, utils, BN, AnchorProvider } from '@project-serum/anchor'\nimport { LeFlash } from '../target/types/le_flash'\n\nimport { FEE_OPTIONS, DEFAULT_LE_FLASH_IDL } from './constant'\nimport { Leaf } from './merkleDistributor'\nimport { DistributorData, ReceiptData, FeeOptions } from './types'\nimport { findReceipt, isAddress, isHash } from './utils'\n\nexport class Utility {\n  readonly _provider: AnchorProvider\n  readonly program: Program<LeFlash>\n  constructor(provider: AnchorProvider, programId: string) {\n    if (!isAddress(programId)) throw new Error('Invalid program id')\n    // Private\n    this._provider = provider\n    // Public\n    this.program = new Program<LeFlash>(\n      DEFAULT_LE_FLASH_IDL,\n      programId,\n      this._provider,\n    )\n  }\n\n  /**\n   * Get list of event names\n   */\n  get events() {\n    return this.program.idl.events.map(({ name }) => name)\n  }\n\n  /**\n   * Remove listener by its id\n   * @param listenerId Listener id\n   * @returns\n   */\n  removeListener = async (listenerId: number) => {\n    try {\n      await this.program.removeEventListener(listenerId)\n    } catch (er: any) {\n      console.warn(er)\n    }\n  }\n\n  /**\n   * Get current Unix Timestamp of Solana Cluster\n   * @param getCurrentUnixTimestamp\n   * @returns Number (in seconds)\n   */\n  getCurrentUnixTimestamp = async (): Promise<number> => {\n    const { data: buf } =\n      (await this.program.provider.connection.getAccountInfo(\n        web3.SYSVAR_CLOCK_PUBKEY,\n      )) || {}\n    if (!buf) throw new Error('Cannot fetch clock data')\n    const unixTimestamp = new BN(buf.subarray(32, 40), 'le')\n    return unixTimestamp.toNumber()\n  }\n\n  /**\n   * Parse distributor buffer data.\n   * @param data Distributor buffer data.\n   * @returns Distributor readable data.\n   */\n  parseDistributorData = (data: Buffer): DistributorData => {\n    return this.program.coder.accounts.decode('distributor', data)\n  }\n\n  /**\n   * Get distributor data.\n   * @param distributorAddress Distributor address.\n   * @returns Distributor readable data.\n   */\n  getDistributorData = async (\n    distributorAddress: string,\n  ): Promise<DistributorData> => {\n    return this.program.account.distributor.fetch(distributorAddress) as any\n  }\n\n  /**\n   * Parse receipt buffer data.\n   * @param data Receipt buffer data.\n   * @returns Receipt readable data.\n   */\n  parseReceiptData = (data: Buffer): ReceiptData => {\n    return this.program.coder.accounts.decode('receipt', data)\n  }\n\n  /**\n   * Get receipt data.\n   * @param receiptAddress Receipt address.\n   * @returns Receipt readable data.\n   */\n  getReceiptData = async (receiptAddress: string): Promise<ReceiptData> => {\n    return this.program.account.receipt.fetch(receiptAddress) as any\n  }\n\n  /**\n   * Derive my receipt address by distributor address, and salt.\n   * @param salt Buffer.\n   * @param distributorAddress Distributor address.\n   * @param strict (Optional) if true, a validation process will activate to make sure the receipt is safe.\n   * @returns Receipt address.\n   */\n  deriveReceiptAddress = async (\n    salt: Buffer,\n    distributorAddress: string,\n    strict: boolean = false,\n  ) => {\n    if (salt.length !== 32) throw new Error('The salt must has length 32')\n    if (!isAddress(distributorAddress))\n      throw new Error('Invalid distributor address')\n\n    const receiptPublicKey = await findReceipt(\n      salt,\n      new web3.PublicKey(distributorAddress),\n      this._provider.wallet.publicKey,\n      this.program.programId,\n    )\n    const receiptAddress = receiptPublicKey.toBase58()\n\n    if (strict) {\n      let onchainAuthorityAddress: string\n      let onchainDistributorAddress: string\n      let onchainSalt: Buffer\n      try {\n        const { authority, distributor, salt } = await this.getReceiptData(\n          receiptAddress,\n        )\n        onchainAuthorityAddress = authority.toBase58()\n        onchainDistributorAddress = distributor.toBase58()\n        onchainSalt = Buffer.from(salt)\n      } catch (er) {\n        throw new Error(`This receipt ${receiptAddress} is not initialized yet`)\n      }\n      if (\n        this._provider.wallet.publicKey.toBase58() !== onchainAuthorityAddress\n      )\n        throw new Error('Violated authority address')\n      if (distributorAddress !== onchainDistributorAddress)\n        throw new Error('Violated proposal address')\n      if (salt.compare(onchainSalt) !== 0) throw new Error('Violated salt')\n    }\n\n    return receiptAddress\n  }\n\n  /**\n   * Derive treasurer address of a distributor.\n   * @param distributorAddress Distributor address.\n   * @returns Treasurer address that holds the secure token treasuries of the distributor.\n   */\n  deriveTreasurerAddress = async (distributorAddress: string) => {\n    if (!isAddress(distributorAddress))\n      throw new Error('Invalid distributor address')\n    const distributorPublicKey = new web3.PublicKey(distributorAddress)\n    const [treasurerPublicKey] = await web3.PublicKey.findProgramAddress(\n      [Buffer.from('treasurer'), distributorPublicKey.toBuffer()],\n      this.program.programId,\n    )\n    return treasurerPublicKey.toBase58()\n  }\n\n  /**\n   * Initialize a merkle distributor.\n   * @param tokenAddress Distributed token address.\n   * @param total The total number of tokens that will be distributed out to the community.\n   * @param merkleRoot Root of the merkle tree.\n   * @param metadata The representation that link to the recipient data. For example: CID on IPFS.\n   * @param endedAt (Optional) (In seconds) Due date for the distributor, after that the distributor owner can revoke the remaining tokens. Default: 0 - no due date.\n   * @param distributor (Optional) The distributor keypair. If it's not provided, a new one will be auto generated.\n   * @param feeOptions (Optional) Protocol fee.\n   * @param sendAndConfirm (Optional) Send and confirm the transaction immediately.\n   * @returns { tx, txId, distributorAddress }\n   */\n  initializeDistributor = async ({\n    tokenAddress,\n    total,\n    merkleRoot,\n    metadata,\n    startedAt = 0,\n    endedAt = 0,\n    distributor = web3.Keypair.generate(),\n    feeOptions = FEE_OPTIONS(this._provider.wallet.publicKey.toBase58()),\n    sendAndConfirm = true,\n  }: {\n    tokenAddress: string\n    total: BN\n    merkleRoot: any\n    metadata: any\n    startedAt?: number\n    endedAt?: number\n    distributor?: web3.Keypair\n    feeOptions?: FeeOptions\n    sendAndConfirm?: boolean\n  }) => {\n    const { fee, feeCollectorAddress } = feeOptions\n    if (!isAddress(feeCollectorAddress))\n      throw new Error('Invalid fee collector address')\n    if (!isAddress(tokenAddress)) throw new Error('Invalid token address')\n    if (!isHash(merkleRoot)) throw new Error('Invalid merkle root')\n    if (total.isNeg()) throw new Error('The total must not be negative')\n    if (metadata.length !== 32) throw new Error('Invalid metadata path')\n\n    const distributorAddress = distributor.publicKey.toBase58()\n    const tokenPublicKey = new web3.PublicKey(tokenAddress)\n    const srcPublicKey = await utils.token.associatedAddress({\n      mint: tokenPublicKey,\n      owner: this._provider.wallet.publicKey,\n    })\n    const treasurerAddress = await this.deriveTreasurerAddress(\n      distributorAddress,\n    )\n    const treasurerPublicKey = new web3.PublicKey(treasurerAddress)\n    const treasuryPublicKey = await utils.token.associatedAddress({\n      mint: tokenPublicKey,\n      owner: treasurerPublicKey,\n    })\n\n    const builder = this.program.methods\n      .initializeDistributor(\n        [...merkleRoot],\n        total,\n        new BN(endedAt),\n        new BN(startedAt),\n        [...metadata],\n        fee,\n      )\n      .accounts({\n        authority: this._provider.wallet.publicKey,\n        distributor: distributor.publicKey,\n        src: srcPublicKey,\n        treasurer: treasurerPublicKey,\n        treasury: treasuryPublicKey,\n        feeCollector: new web3.PublicKey(feeCollectorAddress),\n        mint: tokenPublicKey,\n        tokenProgram: utils.token.TOKEN_PROGRAM_ID,\n        associatedTokenProgram: utils.token.ASSOCIATED_PROGRAM_ID,\n        systemProgram: web3.SystemProgram.programId,\n        rent: web3.SYSVAR_RENT_PUBKEY,\n      })\n      .signers([distributor])\n    const tx = await builder.transaction()\n    const txId = sendAndConfirm\n      ? await builder.rpc({ commitment: 'confirmed' })\n      : ''\n\n    return { tx, txId, distributorAddress }\n  }\n\n  /**\n   * Claim a distribution.\n   * @param distributorAddress The distributor address.\n   * @param proof Merkle proof.\n   * @param data Receipient data.\n   * @param feeOptions (Optional) Protocol fee.\n   * @param sendAndConfirm (Optional) Send and confirm the transaction immediately.\n   * @returns { tx, txId, dstAddress }\n   */\n  claim = async ({\n    distributorAddress,\n    proof,\n    data,\n    feeOptions = FEE_OPTIONS(this._provider.wallet.publicKey.toBase58()),\n    sendAndConfirm = true,\n  }: {\n    distributorAddress: string\n    proof: Array<Buffer>\n    data: Leaf\n    feeOptions?: FeeOptions\n    sendAndConfirm?: boolean\n  }) => {\n    const { fee, feeCollectorAddress } = feeOptions\n    if (!isAddress(feeCollectorAddress))\n      throw new Error('Invalid fee collector address')\n    if (!isAddress(distributorAddress))\n      throw new Error('Invalid distributor address')\n    if (!this._provider.wallet.publicKey.equals(data.authority))\n      throw new Error('Invalid athority address')\n\n    const { mint: tokenPublicKey } = await this.getDistributorData(\n      distributorAddress,\n    )\n    const receiptAddress = await this.deriveReceiptAddress(\n      data.salt,\n      distributorAddress,\n    )\n    const dstPublicKey = await utils.token.associatedAddress({\n      mint: tokenPublicKey,\n      owner: this._provider.wallet.publicKey,\n    })\n    const treasurerAddress = await this.deriveTreasurerAddress(\n      distributorAddress,\n    )\n    const treasurerPublicKey = new web3.PublicKey(treasurerAddress)\n    const treasuryPublicKey = await utils.token.associatedAddress({\n      mint: tokenPublicKey,\n      owner: treasurerPublicKey,\n    })\n\n    const builder = await this.program.methods\n      .claim(\n        proof.map((e) => e.toJSON().data),\n        new BN(1),\n        data.startedAt,\n        data.salt.toJSON().data,\n        fee,\n        data.chequeAddress,\n      )\n      .accounts({\n        authority: this._provider.wallet.publicKey,\n        distributor: new web3.PublicKey(distributorAddress),\n        receipt: new web3.PublicKey(receiptAddress),\n        dst: dstPublicKey,\n        treasurer: treasurerPublicKey,\n        treasury: treasuryPublicKey,\n        feeCollector: new web3.PublicKey(feeCollectorAddress),\n        mint: tokenPublicKey,\n        tokenProgram: utils.token.TOKEN_PROGRAM_ID,\n        associatedTokenProgram: utils.token.ASSOCIATED_PROGRAM_ID,\n        systemProgram: web3.SystemProgram.programId,\n        rent: web3.SYSVAR_RENT_PUBKEY,\n      })\n    const tx = await builder.transaction()\n    const txId = sendAndConfirm\n      ? await builder.rpc({ commitment: 'confirmed' })\n      : ''\n\n    return { tx, txId, dstAddress: dstPublicKey.toBase58() }\n  }\n}\n","import { Env } from '@sentre/senhub'\n\nif (\n  typeof process.env.REACT_APP_ID !== 'string' ||\n  typeof process.env.REACT_APP_URL !== 'string'\n)\n  throw new Error('Please add REACT_APP_ID, REACT_APP_URL in .env!')\n\n/**\n * Contructor\n */\n\ntype Conf = {\n  appId: string\n  url: string\n}\n\nconst shared = {\n  appId: process.env.REACT_APP_ID,\n  url: process.env.REACT_APP_URL,\n}\n\nconst conf: Record<Env, Conf> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    ...shared,\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    ...shared,\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from '@sentre/senhub'\n\n/**\n * Contructor\n */\ntype Conf = {\n  node: string\n  leFlashId: string\n}\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    node: 'https://api.devnet.solana.com',\n    leFlashId: '3E8eFwLQhHgtzqAnestzG7SeZUWYH7BZLf8m9EGa8wJH',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    node: 'https://api.testnet.solana.com',\n    leFlashId: '3E8eFwLQhHgtzqAnestzG7SeZUWYH7BZLf8m9EGa8wJH',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    node: 'https://api.mainnet-beta.solana.com',\n    leFlashId: '3E8eFwLQhHgtzqAnestzG7SeZUWYH7BZLf8m9EGa8wJH',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Env } from '@sentre/senhub'\n\n/**\n * Constructor\n */\n\ntype Conf = {\n  senApiUpload: string\n  aws: string\n}\n\nconst conf: Record<Env, Conf> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    senApiUpload: 'https://api.sentre.io/storage/upload',\n    aws: 'https://sen-storage.s3.us-west-2.amazonaws.com/',\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    senApiUpload: 'https://api.sentre.io/storage/upload',\n    aws: 'https://sen-storage.s3.us-west-2.amazonaws.com/',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { env, net } from '@sentre/senhub'\nimport manifest from './manifest.config'\nimport sol from './sol.config'\nimport api from './api.config'\n\nconst configs = {\n  manifest: manifest[env],\n  sol: sol[net],\n  api: api[env],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import { useMemo } from 'react'\nimport { rpc, useWalletAddress } from '@sentre/senhub'\nimport { getAnchorProvider } from '@sen-use/web3'\nimport { AnchorProvider } from '@project-serum/anchor'\n\nimport configs from 'configs'\nimport { Utility } from 'lib'\n\nconst useUtility = () => {\n  const address = useWalletAddress()\n  const utility = useMemo(() => {\n    const provider = getAnchorProvider(\n      rpc,\n      address,\n      window.sentre.solana,\n    ) as AnchorProvider\n    return new Utility(provider, configs.sol.leFlashId)\n  }, [address])\n\n  return utility\n}\n\nexport default useUtility\n","import { bs58 } from '@project-serum/anchor/dist/cjs/utils/bytes'\n\nconst NULL = Buffer.from('00', 'hex')\nconst EXTENSION_LENGTH = 4\nconst CONTENT_LENGTH = 28\n\nconst decodeExtension = (cid: string) => {\n  const buf = bs58.decode(cid)\n  let ext = Buffer.from(\n    buf.subarray(CONTENT_LENGTH, CONTENT_LENGTH + EXTENSION_LENGTH),\n  ).toString('utf8')\n  while (ext[0] === NULL.toString('utf8')) ext = ext.substring(1)\n  return ext\n}\n\nexport const toFilename = (cid: string) => {\n  const extension = decodeExtension(cid)\n  const content = Buffer.from(bs58.decode(cid).subarray(0, CONTENT_LENGTH))\n  return `${bs58.encode(content)}.${extension}`\n}\n\nexport type S3Info = {\n  bucket: string\n  region: string\n}\n\nexport const toUrl = (cid: string, { bucket, region }: S3Info) => {\n  const filename = toFilename(cid)\n  return `https://${bucket}.s3.${region}.amazonaws.com/${filename}`\n}\n","import { useCallback, useEffect, useMemo, useState } from 'react'\n\nimport { useWalletAddress } from '@sentre/senhub'\n\nimport { Row, Button } from 'antd'\nimport { notifyError } from '@sen-use/app'\n\nimport { MerkleDistributor } from 'lib'\nimport useUtility from 'hooks/useUtility'\nimport { useGetMetadata } from 'hooks/useGetMetadata'\nimport useWithdrawNFT from 'hooks/action/useWithdrawNFT'\n\nconst distributorAddress = '9GNAW8gpiatCFHryfF5XyhXP3wKXLb9Kqd3zgdn8y43M'\n\nconst Redeem = () => {\n  const [loading, setLoading] = useState(false)\n  const [merkle, setMerkle] = useState<MerkleDistributor>()\n  const { onWithdraw } = useWithdrawNFT()\n  const getMetaData = useGetMetadata()\n\n  const walletAddress = useWalletAddress()\n  const utility = useUtility()\n\n  const getMerkleDistributor = useCallback(async () => {\n    try {\n      const distributor = await utility.getDistributorData(distributorAddress)\n      console.log(distributor)\n      const {\n        data: { data },\n      } = await getMetaData(distributor)\n\n      const merkleDistributor = MerkleDistributor.fromBuffer(Buffer.from(data))\n\n      return setMerkle(merkleDistributor)\n    } catch (error) {\n      notifyError(error)\n    } finally {\n    }\n  }, [getMetaData, utility])\n\n  const recipientData = useMemo(() => {\n    if (!merkle) return\n    const recipients = merkle.receipients\n    for (const recipient of recipients) {\n      if (walletAddress === recipient.authority.toBase58()) return recipient\n    }\n  }, [merkle, walletAddress])\n\n  const onRedeem = async () => {\n    if (!recipientData || !merkle) return\n    const proof = merkle.deriveProof(recipientData)\n    const validProof = merkle.verifyProof(proof, recipientData)\n    if (!validProof) return\n\n    try {\n      setLoading(true)\n      await utility.claim({\n        distributorAddress,\n        proof,\n        data: recipientData,\n      })\n      console.log(recipientData.chequeAddress.toBase58())\n      await onWithdraw(recipientData.chequeAddress.toBase58())\n    } catch (error) {\n      notifyError(error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    getMerkleDistributor()\n  }, [getMerkleDistributor])\n\n  return (\n    <Row gutter={[24, 24]} justify=\"center\" className=\"lightning-container\">\n      <Button type=\"primary\" onClick={onRedeem} loading={loading}>\n        Redeem\n      </Button>\n    </Row>\n  )\n}\n\nexport default Redeem\n","import { useCallback } from 'react'\nimport { bs58 } from '@project-serum/anchor/dist/cjs/utils/bytes'\nimport axios from 'axios'\n\nimport configs from 'configs'\nimport { toFilename } from 'helper'\nimport { DistributorData } from 'lib'\n\nexport const useGetMetadata = () => {\n  const getMetaData = useCallback(async (distributorData: DistributorData) => {\n    const { metadata } = distributorData\n    const cid = bs58.encode(Buffer.from(metadata))\n    const fileName = toFilename(cid)\n    const url = configs.api.aws + fileName\n    const { data } = await axios.get(url)\n\n    return { data: data.data }\n  }, [])\n\n  return getMetaData\n}\n","import { useMemo, useState } from 'react'\n\nimport { BN, web3 } from '@project-serum/anchor'\nimport { notifyError, notifySuccess } from '@sen-use/app'\nimport { Row, Col, Button } from 'antd'\n\nimport { Recipient, useDeposit } from 'hooks/action/useDeposit'\nimport useWithdrawNFT from 'hooks/action/useWithdrawNFT'\nimport { Leaf, MerkleDistributor } from 'lib'\nimport { useUploadFile } from 'hooks/useUploadFile'\nimport { bs58 } from '@project-serum/anchor/dist/cjs/utils/bytes'\nimport useUtility from 'hooks/useUtility'\nimport Redeem from './redeem'\n\nconst collection = 'PV64GFvXc9vNWWvQs9XAxGYjy9xzACHw9yAJhAypeVe'\n\n// const mint1 = '6uAcYPE2sgsBzaSosUKq9uQAwbf4e8hQskCiHk88SuUk'\n// const mint2 = '9ePZB4XqLBeJ7x867HF3CE4BNayD4zKAmYiPKBUokCWF'\n// const mint3 = 'EeFwaZttwMSwGEKGq4c8JR7ApVATY2YVFvtzdmtsd3Sp'\n\n// const r1 = '9n41gkNJAXuwtwpBxwAAS9wmDoEgH79cs3DtYqcawXwa'\n// const r2 = '2A74q3JHKPpQLbz6AXsRgwSGzUVK57hx3Kf6te9n4Dbn'\nconst r3 = 'G7Q73K3cL2eQQrp7KcZw3hEboZb2Zmr2Lb7p6wNNiwdF'\n\nconst recipients: Recipient[] = [\n  {\n    mintNft: 'HR8NVufX46rhAWU6tUm4QmyB77BUwbN6HAxVWgpE3dEm',\n  },\n]\n\nconst recipientInfos = [\n  {\n    walletAddress: '2vAEiACep3J1N2J6YY9gt4gAbbFEvuVdWgyu8KUkgzgn',\n    chequeAddress: 'CtgycWabAnLB7PYXQdhPp3FuuJqcwiCCGxvFWbsPmzyg',\n    unlockTime: 0,\n  },\n]\n\nconst View = () => {\n  const [mintAddress, setMintAddress] = useState(\n    '8YD4Mi1B7huwJgjaipwLrTCr3rvq5DvDsRUmxqhowD2r',\n  )\n  const { onDeposit, loading: loadingDps } = useDeposit()\n  const { loading: loadingWtd, onWithdraw } = useWithdrawNFT()\n  const utility = useUtility()\n\n  const [pool, setPool] = useState(\n    'ENc9uK6z1sGLdp6iN2er32Aatxg6Cxr1TaY4FRJeP4pE',\n  )\n  const [loading, setLoading] = useState(false)\n  const uploadToAWS = useUploadFile()\n\n  const onInitPool = async () => {\n    try {\n      setLoading(true)\n      const { poolAddress, txId } = await window.leFlash.initializePool({\n        mint: new web3.PublicKey(collection),\n      })\n      setPool(poolAddress)\n      console.log(poolAddress)\n      notifySuccess('Initialized Pool successfully!', txId)\n    } catch (error) {\n      notifyError(error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  // const getReceipts = async () => {\n  //   if (!pool) return\n  //   try {\n  //     setLoading(true)\n  //     const data = await window.leFlash.fetchCheques()\n  //     const bulk: Record<string, ChequeData> = {}\n  //     console.log(data)\n  //     for (const { account, publicKey } of data) {\n  //       console.log(account.amount.toString())\n  //       if (\n  //         account.authority.toBase58() !==\n  //           '2vAEiACep3J1N2J6YY9gt4gAbbFEvuVdWgyu8KUkgzgn' ||\n  //         account.pool.toBase58() !== pool\n  //       )\n  //         continue\n  //       bulk[publicKey.toBase58()] = account\n  //     }\n  //     console.log(bulk)\n  //   } catch (error) {\n  //     notifyError(error)\n  //   } finally {\n  //     setLoading(false)\n  //   }\n  // }\n\n  const getMint = async () => {\n    const { mintLpt } = await window.leFlash.getPoolData(pool)\n    console.log('mintLpt: ', mintLpt.toBase58())\n    return setMintAddress(mintLpt.toBase58())\n  }\n\n  const treeData = useMemo(() => {\n    const balanceTree: Leaf[] = recipientInfos.map(\n      ({ chequeAddress, unlockTime, walletAddress }, index) => {\n        return {\n          authority: new web3.PublicKey(walletAddress),\n          chequeAddress: new web3.PublicKey(chequeAddress),\n          startedAt: new BN(unlockTime / 1000),\n          salt: MerkleDistributor.salt(`le-flash/${index.toString()}`),\n        }\n      },\n    )\n    const merkleDistributor = new MerkleDistributor(balanceTree)\n    const dataBuffer = merkleDistributor.toBuffer()\n    console.log(dataBuffer)\n    return dataBuffer\n  }, [])\n\n  const onConfirm = async () => {\n    try {\n      if (!treeData) throw new Error('Invalid Merkle Data')\n      setLoading(true)\n      console.log('dataBuffer')\n      const merkleDistributor = MerkleDistributor.fromBuffer(treeData)\n\n      const data = {\n        checked: false,\n        createAt: Math.floor(Date.now() / 1000),\n        data: treeData,\n      }\n      const blob = [\n        new Blob([JSON.stringify({ data }, null, 2)], {\n          type: 'application/json',\n        }),\n      ]\n\n      const file = new File(blob, 'metadata.txt')\n      const cid = await uploadToAWS(file)\n      const metadata = bs58.decode(cid)\n\n      const { txId, distributorAddress } = await utility.initializeDistributor({\n        tokenAddress: mintAddress,\n        total: merkleDistributor.getTotal(),\n        merkleRoot: merkleDistributor.deriveMerkleRoot(),\n        metadata,\n        endedAt: 0 / 1000,\n      })\n\n      console.log(distributorAddress)\n\n      notifySuccess('Airdrop', txId)\n    } catch (error: any) {\n      window.notify({\n        type: 'error',\n        description: error.message,\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <Row>\n      <Col span={12}>\n        {/* <NftSelection onSelect={setMintAddress} selectedNFTs={[mintAddress]} /> */}\n        <Button\n          loading={loadingDps}\n          disabled={!pool}\n          onClick={() => onDeposit(recipients, pool)}\n        >\n          Deposit\n        </Button>\n        <Button loading={loading} onClick={onInitPool}>\n          Init Pool\n        </Button>\n        <Button loading={loadingWtd} onClick={() => onWithdraw(r3)}>\n          Withdraw\n        </Button>\n        <Button loading={loading} onClick={getMint}>\n          getMint\n        </Button>\n        <Button loading={loading} onClick={onConfirm}>\n          init distributor\n        </Button>\n        <Redeem />\n      </Col>\n    </Row>\n  )\n}\n\nexport default View\n","import { useCallback } from 'react'\nimport axios from 'axios'\n\nimport configs from 'configs'\n\nexport const useUploadFile = () => {\n  const uploadToAWS = useCallback(async (file: File) => {\n    const formData = new FormData()\n    formData.append('file', file)\n\n    const { data } = await axios.post(configs.api.senApiUpload, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n      withCredentials: true,\n    })\n    return data.cid\n  }, [])\n\n  return uploadToAWS\n}\n","import { PublicKey } from '@solana/web3.js'\nimport BN from 'bn.js'\n\n// Bugfix performance\n// https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/Troubleshooting.md#excessive-use-of-memory-and-cpu\nexport const devTools = (appName: string): any => {\n  if (process.env.REACT_APP_ENV !== 'development') return false\n  return {\n    name: appName,\n    actionSanitizer: ({ payload, type }: { payload: any; type: string }) => ({\n      payload,\n      type,\n    }),\n  }\n}\n\n// BigInt Serialization Middleware\n// https://redux-toolkit.js.org/api/serializabilityMiddleware\nconst isPlain = (val: any): boolean => {\n  const isPlainObject = (obj: object): boolean => {\n    if (obj === null) return false\n    const proto = Object.getPrototypeOf(obj)\n    return proto !== null && Object.getPrototypeOf(proto) === null\n  }\n  return (\n    typeof val === 'undefined' ||\n    val === null ||\n    typeof val === 'string' ||\n    typeof val === 'boolean' ||\n    typeof val === 'number' ||\n    Array.isArray(val) ||\n    isPlainObject(val) ||\n    typeof val === 'bigint' ||\n    val instanceof PublicKey ||\n    val instanceof BN ||\n    Buffer.isBuffer(val)\n  )\n}\nBigInt.prototype.toJSON = function () {\n  return this.toString() // https://github.com/GoogleChromeLabs/jsbi/issues/30\n}\nexport const bigintSerializationMiddleware = {\n  serializableCheck: {\n    isSerializable: isPlain,\n  },\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\n\nexport type State = {\n  counter: number\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'main'\nconst initialState: State = {\n  counter: 0,\n}\n\n/**\n * Actions\n */\n\nexport const increaseCounter = createAsyncThunk<State, void, { state: any }>(\n  `${NAME}/increaseCounter`,\n  async (_, { getState }) => {\n    const {\n      main: { counter },\n    } = getState()\n    return { counter: counter + 1 }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder.addCase(\n      increaseCounter.fulfilled,\n      (state, { payload }) => void Object.assign(state, payload),\n    ),\n})\n\nexport default slice.reducer\n","import { configureStore } from '@reduxjs/toolkit'\nimport { devTools, bigintSerializationMiddleware } from 'model/devTools'\n\nimport main from 'model/main.controller'\n\n/**\n * Isolated store\n */\nconst model = configureStore({\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware(bigintSerializationMiddleware),\n  devTools: devTools(process.env.REACT_APP_ID as string),\n  reducer: {\n    main,\n  },\n})\n\nexport type AppState = ReturnType<typeof model.getState>\nexport type AppDispatch = typeof model.dispatch\nexport default model\n","import { Fragment, useEffect, useState } from 'react'\nimport { rpc, useWalletAddress } from '@sentre/senhub'\nimport { getAnchorProvider } from '@sen-use/web3'\nimport { AnchorProvider } from '@project-serum/anchor'\n\nimport LeFlashProgram from 'lib/core'\nimport configs from 'configs'\n\nexport const AppLoader: React.FC = ({ children }) => {\n  const address = useWalletAddress()\n  const [loaded, setLoaded] = useState(false)\n\n  useEffect(() => {\n    if (loaded) return\n    const provider = getAnchorProvider(\n      rpc,\n      address,\n      window.sentre.solana,\n    ) as AnchorProvider\n    const leFlashProgram = new LeFlashProgram(provider, configs.sol.leFlashId)\n    window.leFlash = leFlashProgram\n\n    setLoaded(true)\n  }, [address, loaded])\n\n  if (!loaded) return null\n  return <Fragment>{children}</Fragment>\n}\n","import { Provider } from 'react-redux'\nimport { AntdProvider } from '@sentre/senhub'\n\nimport View from 'view'\n\nimport model from 'model'\nimport configs from 'configs'\nimport { AppLoader } from 'view/appLoader'\n\nconst {\n  manifest: { appId },\n} = configs\n\nexport const Page = () => {\n  return (\n    <AntdProvider appId={appId}>\n      <Provider store={model}>\n        <AppLoader>\n          <View />\n        </AppLoader>\n      </Provider>\n    </AntdProvider>\n  )\n}\n\nexport * from 'static.app'\n"],"names":["Object","defineProperty","exports","value","enumerable","get","_logo","default","_README","_panel","_interopRequireDefault","require","obj","__esModule","panels","loading","setLoading","useState","onWithdraw","useCallback","async","tran","tx","txWithdraw","window","leFlash","withdrawNFT","chequeAddress","sendAndConfirm","push","txClose","closeCheque","_provider","sendAll","map","signers","notifySuccess","error","notifyError","bs58","BorshAccountsCoder","DEFAULT_LE_FLASH_IDL","version","name","instructions","accounts","isMut","isSigner","args","type","array","vec","kind","fields","events","index","errors","code","msg","FEE_OPTIONS","walletAddress","web3","publicKey","toBase58","fee","BN","feeCollectorAddress","isAddress","address","Error","er","findNftMetadataAddress","programs","nftAddress","findReceipt","salt","distributorPublicKey","authorityPublicKey","programId","receiptPublicKey","Buffer","from","toBuffer","PROGRAMS","rent","systemProgram","associatedTokenProgram","utils","tokenProgram","TOKEN_PROGRAM_ID","constructor","provider","program","deriveTreasurerAddress","poolAddress","poolPublicKey","treasurerPublicKey","this","deriveChequeAddress","strict","wallet","chequePubkey","onchainAuthorityAddress","onchainPoolAddress","authority","pool","getChequeData","getPoolData","account","fetch","cheque","fetchCheques","all","requestUnits","addCompute","add","ComputeBudgetProgram","units","additionalFee","initializePool","mintLpt","mint","newPool","treasurer","tokenAccountLpt","owner","treasury","methods","associatedTokenAccountLpt","transaction","txId","opts","skipPreflight","deposit","recipient","mintNFTAddress","chequeKeypair","metadataPublicKey","srcAssociatedTokenAccount","chequePublicKey","metadata","withdraw","amount","dstAssociatedTokenAccount","mintNFT","withdrawNft","console","log","Program","LEAF_LEN","MerkleDistributor","receipients","leafs","getTotal","length","concat","serialize","getLeaf","data","seed","hash","getParent","a","b","sort","getSibling","layer","findIndex","leaf","compare","nextLayer","bufs","_bufs","carry","pop","undefined","re","i","deriveMerkleRoot","deriveProof","child","proof","sibling","verifyProof","receipient","startedAt","toArrayLike","deserialize","buf","subarray","defaultSeed","_seed","Math","round","random","toString","fromBuffer","Utility","removeListener","removeEventListener","listenerId","warn","getCurrentUnixTimestamp","connection","getAccountInfo","toNumber","parseDistributorData","coder","decode","getDistributorData","distributor","distributorAddress","parseReceiptData","getReceiptData","receipt","receiptAddress","deriveReceiptAddress","onchainDistributorAddress","onchainSalt","initializeDistributor","tokenAddress","total","merkleRoot","endedAt","feeOptions","isNeg","tokenPublicKey","srcPublicKey","treasurerAddress","treasuryPublicKey","builder","src","feeCollector","rpc","commitment","claim","equals","dstPublicKey","e","toJSON","dst","dstAddress","idl","shared","appId","process","url","devnet","node","leFlashId","testnet","mainnet","development","senApiUpload","aws","production","manifest","env","sol","net","api","useWalletAddress","useMemo","getAnchorProvider","sentre","solana","configs","NULL","toFilename","cid","extension","ext","CONTENT_LENGTH","substring","decodeExtension","content","merkle","setMerkle","useWithdrawNFT","getMetaData","distributorData","fileName","axios","utility","useUtility","getMerkleDistributor","merkleDistributor","recipientData","recipients","useEffect","Row","gutter","justify","className","Button","onClick","mintNft","recipientInfos","unlockTime","mintAddress","setMintAddress","onDeposit","loadingDps","txs","newChequeKeypair","useDeposit","loadingWtd","setPool","uploadToAWS","formData","FormData","append","file","headers","withCredentials","treeData","balanceTree","dataBuffer","Col","span","disabled","checked","createAt","floor","Date","now","blob","Blob","JSON","stringify","File","notify","description","message","BigInt","prototype","bigintSerializationMiddleware","serializableCheck","isSerializable","val","Array","isArray","proto","getPrototypeOf","isPlainObject","PublicKey","isBuffer","NAME","increaseCounter","createAsyncThunk","_","getState","main","counter","createSlice","initialState","reducers","extraReducers","addCase","fulfilled","state","payload","assign","configureStore","middleware","getDefaultMiddleware","devTools","reducer","AppLoader","children","loaded","setLoaded","leFlashProgram","LeFlashProgram","Fragment","Page","AntdProvider","Provider","store","model"],"sourceRoot":""}